// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package access_point

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}
	customPreCompare(delta, a, b)

	if ackcompare.HasNilDifference(a.ko.Spec.FileSystemID, b.ko.Spec.FileSystemID) {
		delta.Add("Spec.FileSystemID", a.ko.Spec.FileSystemID, b.ko.Spec.FileSystemID)
	} else if a.ko.Spec.FileSystemID != nil && b.ko.Spec.FileSystemID != nil {
		if *a.ko.Spec.FileSystemID != *b.ko.Spec.FileSystemID {
			delta.Add("Spec.FileSystemID", a.ko.Spec.FileSystemID, b.ko.Spec.FileSystemID)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.FileSystemRef, b.ko.Spec.FileSystemRef) {
		delta.Add("Spec.FileSystemRef", a.ko.Spec.FileSystemRef, b.ko.Spec.FileSystemRef)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.PosixUser, b.ko.Spec.PosixUser) {
		delta.Add("Spec.PosixUser", a.ko.Spec.PosixUser, b.ko.Spec.PosixUser)
	} else if a.ko.Spec.PosixUser != nil && b.ko.Spec.PosixUser != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.PosixUser.GID, b.ko.Spec.PosixUser.GID) {
			delta.Add("Spec.PosixUser.GID", a.ko.Spec.PosixUser.GID, b.ko.Spec.PosixUser.GID)
		} else if a.ko.Spec.PosixUser.GID != nil && b.ko.Spec.PosixUser.GID != nil {
			if *a.ko.Spec.PosixUser.GID != *b.ko.Spec.PosixUser.GID {
				delta.Add("Spec.PosixUser.GID", a.ko.Spec.PosixUser.GID, b.ko.Spec.PosixUser.GID)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.PosixUser.UID, b.ko.Spec.PosixUser.UID) {
			delta.Add("Spec.PosixUser.UID", a.ko.Spec.PosixUser.UID, b.ko.Spec.PosixUser.UID)
		} else if a.ko.Spec.PosixUser.UID != nil && b.ko.Spec.PosixUser.UID != nil {
			if *a.ko.Spec.PosixUser.UID != *b.ko.Spec.PosixUser.UID {
				delta.Add("Spec.PosixUser.UID", a.ko.Spec.PosixUser.UID, b.ko.Spec.PosixUser.UID)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RootDirectory, b.ko.Spec.RootDirectory) {
		delta.Add("Spec.RootDirectory", a.ko.Spec.RootDirectory, b.ko.Spec.RootDirectory)
	} else if a.ko.Spec.RootDirectory != nil && b.ko.Spec.RootDirectory != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.RootDirectory.CreationInfo, b.ko.Spec.RootDirectory.CreationInfo) {
			delta.Add("Spec.RootDirectory.CreationInfo", a.ko.Spec.RootDirectory.CreationInfo, b.ko.Spec.RootDirectory.CreationInfo)
		} else if a.ko.Spec.RootDirectory.CreationInfo != nil && b.ko.Spec.RootDirectory.CreationInfo != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.RootDirectory.CreationInfo.OwnerGID, b.ko.Spec.RootDirectory.CreationInfo.OwnerGID) {
				delta.Add("Spec.RootDirectory.CreationInfo.OwnerGID", a.ko.Spec.RootDirectory.CreationInfo.OwnerGID, b.ko.Spec.RootDirectory.CreationInfo.OwnerGID)
			} else if a.ko.Spec.RootDirectory.CreationInfo.OwnerGID != nil && b.ko.Spec.RootDirectory.CreationInfo.OwnerGID != nil {
				if *a.ko.Spec.RootDirectory.CreationInfo.OwnerGID != *b.ko.Spec.RootDirectory.CreationInfo.OwnerGID {
					delta.Add("Spec.RootDirectory.CreationInfo.OwnerGID", a.ko.Spec.RootDirectory.CreationInfo.OwnerGID, b.ko.Spec.RootDirectory.CreationInfo.OwnerGID)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RootDirectory.CreationInfo.OwnerUID, b.ko.Spec.RootDirectory.CreationInfo.OwnerUID) {
				delta.Add("Spec.RootDirectory.CreationInfo.OwnerUID", a.ko.Spec.RootDirectory.CreationInfo.OwnerUID, b.ko.Spec.RootDirectory.CreationInfo.OwnerUID)
			} else if a.ko.Spec.RootDirectory.CreationInfo.OwnerUID != nil && b.ko.Spec.RootDirectory.CreationInfo.OwnerUID != nil {
				if *a.ko.Spec.RootDirectory.CreationInfo.OwnerUID != *b.ko.Spec.RootDirectory.CreationInfo.OwnerUID {
					delta.Add("Spec.RootDirectory.CreationInfo.OwnerUID", a.ko.Spec.RootDirectory.CreationInfo.OwnerUID, b.ko.Spec.RootDirectory.CreationInfo.OwnerUID)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.RootDirectory.CreationInfo.Permissions, b.ko.Spec.RootDirectory.CreationInfo.Permissions) {
				delta.Add("Spec.RootDirectory.CreationInfo.Permissions", a.ko.Spec.RootDirectory.CreationInfo.Permissions, b.ko.Spec.RootDirectory.CreationInfo.Permissions)
			} else if a.ko.Spec.RootDirectory.CreationInfo.Permissions != nil && b.ko.Spec.RootDirectory.CreationInfo.Permissions != nil {
				if *a.ko.Spec.RootDirectory.CreationInfo.Permissions != *b.ko.Spec.RootDirectory.CreationInfo.Permissions {
					delta.Add("Spec.RootDirectory.CreationInfo.Permissions", a.ko.Spec.RootDirectory.CreationInfo.Permissions, b.ko.Spec.RootDirectory.CreationInfo.Permissions)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.RootDirectory.Path, b.ko.Spec.RootDirectory.Path) {
			delta.Add("Spec.RootDirectory.Path", a.ko.Spec.RootDirectory.Path, b.ko.Spec.RootDirectory.Path)
		} else if a.ko.Spec.RootDirectory.Path != nil && b.ko.Spec.RootDirectory.Path != nil {
			if *a.ko.Spec.RootDirectory.Path != *b.ko.Spec.RootDirectory.Path {
				delta.Add("Spec.RootDirectory.Path", a.ko.Spec.RootDirectory.Path, b.ko.Spec.RootDirectory.Path)
			}
		}
	}
	desiredACKTags, _ := convertToOrderedACKTags(a.ko.Spec.Tags)
	latestACKTags, _ := convertToOrderedACKTags(b.ko.Spec.Tags)
	if !ackcompare.MapStringStringEqual(desiredACKTags, latestACKTags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}

	return delta
}
